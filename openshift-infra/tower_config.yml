---
- name: Configure Tower
  hosts: tower_instances
  gather_facts: no
  vars:
    ansible_ssh_user: ec2-user
    ansible_python_interpreter: "python"
  vars_files:
    - aws_vars.yml
    - tower_vars.yml

  tasks:
    - name: Install package requirements for Tower CLI
      yum:
        name: "{{ item }}"
        state: present
      become: true
      with_items:
        - python2-pip
        - git
        - pyOpenSSL
        - python-netaddr
        - python-six
        - python2-boto3
        - python-click
        - python-httplib2
    
    - name: Install Tower CLI
      pip:
        name: "{{ item }}"
      become: true
      with_items:
        - ansible-tower-cli
        - boto

    - set_fact:
        student_id: "{{ hostvars[inventory_hostname].student_id }}"
        filter: "{{ 'tag' + ':' + 'student_id=' + student_id }}"

    - debug:
        var: "{{ item }}"
        verbosity: 2
      with_items:
        - hostvars[inventory_hostname].friendly_name
        - hostvars[inventory_hostname].public_ip
        - hostvars[inventory_hostname].student_id
        - tower_username
        - tower_password
        - filter

    - name: Set Tower CLI Host
      command: tower-cli config host "{{ hostvars[inventory_hostname].public_ip }}"
    - name: Set Tower CLI Username
      command: tower-cli config username "{{ tower_username }}"
    - name: Set Tower CLI Password
      command: tower-cli config password "{{ tower_password }}"

    - name: Create Tower Organization
      tower_organization:
        name: "{{ tower_org }}"
        state: present
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
    
    - name: Stage {{ tower_machine_credential }} Private Key
      synchronize:
        src: "{{ tower_machine_credential_ssh_key_data }}"
        dest: "/tmp/{{ tower_machine_credential_ssh_key_data }}"

    - name: Add Tower Machine Credential
      tower_credential:
        name: "{{ tower_machine_credential }}"
        kind: "{{ tower_machine_credential_kind }}"
        organization: "{{ tower_org }}"
        state: present
        ssh_key_data: "/tmp/{{ tower_machine_credential_ssh_key_data }}"
        username: "{{ tower_machine_credential_username }}"
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
    
    - name: Remove {{ tower_machine_credential }} staging file
      file:
        path: "/tmp/{{ tower_machine_credential_ssh_key_data }}"
        state: absent

    - name: Add Tower Cloud Credential
      tower_credential:
        name: "{{ tower_cloud_credential }}"
        kind: "{{ tower_cloud_credential_kind }}"
        organization: "{{ tower_org }}"
        state: present
        username: "{{ tower_cloud_credential_username }}"
        password: "{{ tower_cloud_credential_password }}"
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
    
    - name: Add Tower inventory
      tower_inventory:
        name: "{{ tower_inventory }}"
        organization: "{{ tower_org }}"
        state: present
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
    
    - name: Configure Tower Inventory
      tower_inventory:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_inventory }}"
        organization: "{{ tower_org }}"
        variables:
          - student_id: "{{ student_id }}"
          - lab_user: "{{ lab_user }}"

    - name: Configure Tower Inventory Group
      tower_group:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_inventory_group }}"
        source: "{{ tower_inventory_group_source }}"
        credential: "{{ tower_cloud_credential }}"
        inventory: "{{ tower_inventory }}"
        instance_filters: "{{ filter }}"
        update_on_launch: "{{ tower_inventory_group_update_on_launch }}"
        source_vars:
          regions: "{{ aws_region }}"
          vpc_destination_variable: public_dns_name
          hostname_variable: tag_Name
        state: present

    - name: Add OSEv3 Group
      tower_group:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_openshift_install_group }}"
        source: "manual"
        inventory: "{{ tower_inventory }}"
        state: present
        variables: "{{ lookup('template', 'OSEv3.yml.j2') }}"

    - name: Add OSEv3 Children
      tower_group:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ item }}"
        source: "manual"
        inventory: "{{ tower_inventory }}"
        state: present
      with_items:
        - "{{ tower_openshift_masters_group }}"
        - "{{ tower_openshift_nodes_group }}"
        - "{{ tower_master_tag }}"
        - "{{ tower_node_tag }}"

    - name: Associate OSEv3 Groups
      command: tower-cli group associate --group "{{ item.0 }}" --parent "{{ item.1 }}" --inventory "{{ tower_inventory }}"
      with_together:
        - [ "{{ tower_openshift_nodes_group }}", "{{ tower_node_tag }}", "{{ tower_openshift_masters_group }}", "{{ tower_master_tag }}" ]
        - [ "{{ tower_openshift_install_group }}", "{{ tower_openshift_nodes_group }}", "{{ tower_openshift_nodes_group }}", "{{ tower_openshift_masters_group }}" ]

    - name: Sync Inventory
      command: tower-cli group sync --name "{{ tower_inventory_group }}" --wait

    - name: Configure Project for Provision
      tower_project:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_project_provision }}"
        organization: "{{ tower_org }}"
        state: present
        scm_type: "{{ tower_project_provision_type }}"
        scm_url: "{{ tower_project_provision_url }}"
        scm_branch: "{{ tower_project_provision_branch }}"
        scm_clean: "{{ tower_project_provision_clean }}"
        scm_update_on_launch: "{{ tower_project_provision_update_on_launch }}"
        scm_delete_on_update: "{{ tower_project_provision_delete_on_update }}"

    - name: Update Project for Provision
      command: tower-cli project update --name "{{ tower_project_provision }}" --wait
    
    - name: Copy Extra Variables template
      template:
        src: aws_job_template_extra_vars.yml
        dest: "/tmp/{{ tower_job_template_provision_extra_vars_path }}"

    - name: Configure Job Template for Provision
      tower_job_template:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        job_type: run
        name: "{{ tower_job_template_provision }}"
        state: present
        inventory: "{{ tower_inventory }}"
        cloud_credential: "{{ tower_cloud_credential }}"
        project: "{{ tower_project_provision }}"
        playbook: "{{ tower_job_template_provision_playbook }}"
        extra_vars_path: "/tmp/{{ tower_job_template_provision_extra_vars_path }}"
        machine_credential: "{{ tower_machine_credential }}"

    - name: Install playbooks for {{ tower_project_install }}
      yum:
        name: "{{ tower_project_install_package }}"
        state: present
      become: true
    
# The following tasks can be removed as long as the symlink to /usr/share below works
#    - name: Copy openshift-ansible from system dir to Tower project dir
#      synchronize:
#        src: "{{ tower_project_install_source_path }}"
#        dest: "{{ tower_projects_root }}/{{ tower_project_install_local_path }}/"
#      delegate_to: "{{ inventory_hostname }}"
#      become: true
#
#    - name: Set ownership on local project dir
#      file:
#        path: "{{ tower_projects_root }}/{{ tower_project_install_local_path }}/"
#        owner: awx
#        group: awx
#        state: directory
#        recurse: yes
#      become: true

    - name: Create symbolic link to /usr/share
      file:
        src: /usr/share
        dest: "{{ tower_projects_root }}/share"
        owner: awx
        group: awx
        state: link
      become: true

    - name: Add Tower Project for Install
      tower_project:
        name: "{{ tower_project_install }}"
        organization: "{{ tower_org }}"
        scm_type: "{{ tower_project_install_type }}"
        local_path: "{{ tower_project_install_local_path }}"
        state: present
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
    
    - name: Configure Job Template for Install
      tower_job_template:
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        job_type: run
        name: "{{ tower_job_template_install }}"
        state: present
        inventory: "{{ tower_inventory }}"
        project: "{{ tower_project_install }}"
        playbook: "{{ tower_job_template_install_playbook }}"
        machine_credential: "{{ tower_machine_credential }}"
