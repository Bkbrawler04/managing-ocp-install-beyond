---
- name: Configure Tower
  hosts: tower_instances
  gather_facts: no
  vars:
    ansible_ssh_user: ec2-user
    ansible_python_interpreter: "python"
  vars_files:
    - aws_vars.yml
    - tower_vars.yml

  tasks:
# TODO: Split into role - This should be in a file included by main.yml, named something like 'prereqs.yml'
    - name: Enable OpenShift repository
      command: >
        subscription-manager repos
          --enable="rhel-7-server-ose-{{ openshift_deploy_version }}-rpms"
      become: true

    - name: Install package requirements for Tower CLI
      yum:
        name: "{{ item }}"
        state: present
      become: true
      with_items:
        - python2-pip
        - git
        - pyOpenSSL
        - python-netaddr
        - python-six
        - python2-boto3
        - python-click
        - python-httplib2

    - name: Install Tower CLI
      pip:
        name: "{{ item }}"
      become: true
      with_items:
        - ansible-tower-cli
        - boto

    - set_fact:
        student_id: "{{ hostvars[inventory_hostname].student_id }}"
        filter: "{{ 'tag' + ':' + 'student_id=' + student_id }}"
        tower_host: "{{ hostvars[inventory_hostname].public_ip }}"

    - debug:
        var: "{{ item }}"
        verbosity: 2
      with_items:
        - hostvars[inventory_hostname].friendly_name
        - student_id
        - filter
        - tower_host

# TODO: Split into role - This should be in a file included by main.yml, named something like 'auth.yml'
    - name: Set Tower CLI Host
      command: tower-cli config host "{{ tower_host }}"

    - name: Set Tower CLI Username
      command: tower-cli config username "{{ tower_username }}"

    - name: Set Tower CLI Password
      command: tower-cli config password "{{ tower_password }}"
      no_log: True

# TODO: Split into role - This should be in a file included by main.yml, named something like 'org.yml'
    - name: Create Tower Organization
      tower_organization:
        name: "{{ tower_org }}"
        state: present
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'credentials.yml' and maybe that file includes a separate way 'machine_credential.yml' which is this section only
    - name: Stage {{ tower_machine_credential }} Private Key
      synchronize:
        src: "{{ tower_machine_credential_ssh_key_data }}"
        dest: "/tmp/{{ tower_machine_credential_ssh_key_data }}"

    - name: Add Tower Machine Credential
      tower_credential:
        name: "{{ tower_machine_credential }}"
        kind: "{{ tower_machine_credential_kind }}"
        organization: "{{ tower_org }}"
        state: present
        ssh_key_data: "/tmp/{{ tower_machine_credential_ssh_key_data }}"
        username: "{{ tower_machine_credential_username }}"
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"

    - name: Remove {{ tower_machine_credential }} staging file
      file:
        path: "/tmp/{{ tower_machine_credential_ssh_key_data }}"
        state: absent

# TODO: Split into role - This should be in a file included by main.yml, named something like 'credentials.yml' and maybe that file includes a separate way 'cloud_credential.yml' which is this section only
    - name: Add Tower Cloud Credential
      tower_credential:
        name: "{{ tower_cloud_credential }}"
        kind: "{{ tower_cloud_credential_kind }}"
        organization: "{{ tower_org }}"
        state: present
        username: "{{ tower_cloud_credential_username }}"
        password: "{{ tower_cloud_credential_password }}"
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'inventory.yml'
    - name: Add Tower inventory
      tower_inventory:
        name: "{{ tower_inventory }}"
        organization: "{{ tower_org }}"
        state: present
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"

    - name: Configure Tower Inventory
      tower_inventory:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_inventory }}"
        organization: "{{ tower_org }}"
        variables:
          - student_id: "{{ student_id }}"
          - lab_user: "{{ lab_user }}"

    - name: Configure Tower Inventory Group
      tower_group:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_inventory_group }}"
        source: "{{ tower_inventory_group_source }}"
        credential: "{{ tower_cloud_credential }}"
        inventory: "{{ tower_inventory }}"
        instance_filters: "{{ filter }}"
        update_on_launch: "{{ tower_inventory_group_update_on_launch }}"
        overwrite: "{{ tower_inventory_group_overwrite }}"
        source_vars:
          regions: "{{ aws_region }}"
          vpc_destination_variable: public_dns_name
          hostname_variable: tag_Name
        state: present

    - name: Add OSEv3 Group
      tower_group:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_openshift_install_group }}"
        source: "manual"
        inventory: "{{ tower_inventory }}"
        state: present
        variables: "{{ lookup('template', 'OSEv3.yml.j2') }}"

    - name: Add OSEv3 Children
      tower_group:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ item }}"
        source: "manual"
        inventory: "{{ tower_inventory }}"
        state: present
      with_items:
        - "{{ tower_openshift_masters_group }}"
        - "{{ tower_openshift_nodes_group }}"
        - "{{ tower_master_tag }}"
        - "{{ tower_node_tag }}"

    - name: Associate OSEv3 Groups
      command: >
        tower-cli group associate
          --group "{{ item.0 }}"
          --parent "{{ item.1 }}"
          --inventory "{{ tower_inventory }}"
          "{{ tower_cli_verbosity }}"
      with_together:
        - [ "{{ tower_openshift_nodes_group }}", "{{ tower_node_tag }}", "{{ tower_openshift_masters_group }}", "{{ tower_master_tag }}" ]
        - [ "{{ tower_openshift_install_group }}", "{{ tower_openshift_nodes_group }}", "{{ tower_openshift_nodes_group }}", "{{ tower_openshift_masters_group }}" ]

    - name: Sync Inventory
      command: >
        tower-cli group sync
          --name "{{ tower_inventory_group }}"
          --wait
          "{{ tower_cli_verbosity }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'projects.yml' and it would include this section 'project_provision_and_configure.yml'
    - name: Configure Project for Provision and Configure
      tower_project:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ tower_project_provision_and_configure }}"
        organization: "{{ tower_org }}"
        state: present
        scm_type: "{{ tower_project_provision_and_configure_type }}"
        scm_url: "{{ tower_project_provision_and_configure_url }}"
        scm_branch: "{{ tower_project_provision_and_configure_branch }}"
        scm_clean: "{{ tower_project_provision_and_configure_clean }}"
        scm_update_on_launch: "{{ tower_project_provision_and_configure_update_on_launch }}"
        scm_delete_on_update: "{{ tower_project_provision_and_configure_delete_on_update }}"

    - name: Update Project for Provision
      command: >
        tower-cli project update
          --name "{{ tower_project_provision_and_configure }}"
          --wait
          "{{ tower_cli_verbosity }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'job_templates.yml' and it would include this section 'job_template_provision.yml'
    - name: Configure Job Template for Provision
      tower_job_template:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        job_type: run
        name: "{{ tower_job_template_provision }}"
        state: present
        inventory: "{{ tower_inventory }}"
        cloud_credential: "{{ tower_cloud_credential }}"
        project: "{{ tower_project_provision_and_configure }}"
        playbook: "{{ tower_job_template_provision_playbook }}"
        machine_credential: "{{ tower_machine_credential }}"

    - name: Copy Job Template for Provision Extra Variables file
      template:
        src: "{{ tower_job_template_install_extra_vars_path }}"
        dest: "/tmp/{{ tower_job_template_provision_extra_vars_path }}"

    - name: Update Project Provision with Extra Vars
      command: >
        tower-cli job_template modify
          --name="{{ tower_job_template_provision }}"
          --extra-vars="@/tmp/{{ tower_job_template_provision_extra_vars_path }}"
          "{{ tower_cli_verbosity }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'projects.yml' and this section would be 'project_install.yml'
    - name: Install playbooks for {{ tower_project_install }}
      yum:
        name: "{{ tower_project_install_package }}"
        state: present
      become: true

    - name: Create symbolic link to /usr/share
      file:
        src: /usr/share
        dest: "{{ tower_projects_root }}/share"
        owner: awx
        group: awx
        state: link
      become: true

    - name: Add Tower Project for Install
      tower_project:
        name: "{{ tower_project_install }}"
        organization: "{{ tower_org }}"
        scm_type: "{{ tower_project_install_type }}"
        local_path: "{{ tower_project_install_local_path }}"
        state: present
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'job_templates.yml' and this section would be 'job_template_install.yml'
    - name: Configure Job Template for Install
      tower_job_template:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        job_type: run
        name: "{{ tower_job_template_install }}"
        state: present
        inventory: "{{ tower_inventory }}"
        project: "{{ tower_project_install }}"
        playbook: "{{ tower_job_template_install_playbook }}"
        become_enabled: "{{ tower_job_template_install_become_enabled }}"
        machine_credential: "{{ tower_machine_credential }}"
        cloud_credential: "{{ tower_cloud_credential }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'job_templates.yml' and this section would be 'job_template_configure.yml'
    - name: Configure Job Template for configure
      tower_job_template:
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        job_type: run
        name: "{{ tower_job_template_configure }}"
        state: present
        inventory: "{{ tower_inventory }}"
        cloud_credential: "{{ tower_cloud_credential }}"
        project: "{{ tower_project_provision_and_configure }}"
        playbook: "{{ tower_job_template_configure_playbook }}"
        machine_credential: "{{ tower_machine_credential }}"

# TODO: Split into role - This should be in a file included by main.yml, named something like 'workflows.yml'
    - name: Copy Workflow Template Extra Vars
      template:
        src: "{{ tower_workflow_template_extra_vars }}"
        dest: "/tmp/{{ tower_workflow_template_extra_vars }}"

    - name: Create Workflow Template
      command: >
        tower-cli workflow create
          --name="{{ tower_workflow_template }}"
          --organization="{{ tower_org }}"
          --extra-vars="@/tmp/{{ tower_workflow_template_extra_vars }}"
          "{{ tower_cli_verbosity }}"

    - debug:
        var: "{{ item }}"
        verbosity: 2
      with_items:
        - tower_workflow_template
        - tower_workflow_template_schema

    - name: Copy Workflow Template Schema
      template:
        src: "{{ tower_workflow_template_schema_path }}"
        dest: "/tmp/{{ tower_workflow_template_schema_path }}"

    - name: Create Workflow Schema
      command: tower-cli workflow schema {{ tower_workflow_template }} @/tmp/{{ tower_workflow_template_schema_path }}
          "{{ tower_cli_verbosity }}"

    - name: Launch Workflow Job - this will block while the job runs and may take up to 30 minutes to complete, see Tower UI Jobs for detailed progress
      command: tower-cli workflow_job launch -W {{ tower_workflow_template }} --monitor
      async: "{{ tower_workflow_job_launch_async }}"
      poll: "{{ tower_workflow_job_launch_poll }}"
      when: tower_workflow_job_launch

# TODO: Split into role - This should be in a file included by main.yml, named something like 'deauth.yml'
    - name: Unset Tower CLI Host
      command: >
        tower-cli config
          --unset host
          "{{ tower_cli_verbosity }}"
      when: not tower_keep_cli_credentials

    - name: Unset Tower CLI Username
      command: >
        tower-cli config
          --unset username
          "{{ tower_cli_verbosity }}"
      when: not tower_keep_cli_credentials

    - name: Unset Tower CLI Password
      command: >
        tower-cli config
          --unset password
          "{{ tower_cli_verbosity }}"
      no_log: True
      when: not tower_keep_cli_credentials
