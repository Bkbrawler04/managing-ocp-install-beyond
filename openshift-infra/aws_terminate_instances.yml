---
- name: Terminate Instances
  hosts: all
  gather_facts: yes
  vars_files:
    - aws_vars.yml
    - tower_vars.yml

  tasks:
    - name: Gather ec2 facts from {{ inventory_hostname }}
      ec2_facts:

    - set_fact:
        short_name: "{{ inventory_hostname.split('_')[1] }}"
        tower_host: "localhost"
        #tower_host: "tower-{{ ec2_tag_student_id }}.{{ domain_name }}"

    - debug:
        var: hostvars
        verbosity: 2

    - name: Remove Instance from Tower Inventory
      local_action:
        module: tower_host
        tower_host: "{{ tower_host }}"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        name: "{{ inventory_hostname }}"
        inventory: "{{ tower_inventory }}"
        state: absent
      delegate_to: "ec2-user@{{ tower_host }}"
      when: ('node' in short_name  or 'master' in short_name)
      ignore_errors: yes

    - name: Pause on Tower instance to allow OCP instances time to receive terminate request
      pause:
        seconds: 10
      when: 
        - "'tower' in short_name"
        - terminate_tower|default(false)|bool == true

    - name: Retrieve Instance Public DNS Record
      local_action:
        module: route53
        command: get
        zone: "{{ domain_name }}"
        record: "{{ short_name }}-{{ ec2_tag_student_id }}.{{ domain_name }}"
        type: A
      register: dns_public_record

    - debug:
        var: dns_public_record
        verbosity: 2

    - name: Delete Instance Public DNS Record
      local_action:
        module: route53
        command: delete
        zone: "{{ domain_name }}"
        type: "{{ dns_public_record.set.type }}"
        ttl: "{{ dns_public_record.set.ttl }}"
        record: "{{ dns_public_record.set.record }}"
        value: "{{ dns_public_record.set.value }}"
      when: ('tower' in short_name and terminate_tower|default(false)|bool == true) or ('node' in short_name  or 'master' in short_name)
      ignore_errors: yes

    - name: Retrieve Internal Public DNS Record
      local_action:
        module: route53
        command: get
        zone: "{{ domain_name }}"
        record: "{{ short_name }}-internal-{{ ec2_tag_student_id }}.{{ domain_name }}"
        type: A
      register: dns_internal_record
      when: "'master' in short_name"

    - debug:
        var: dns_internal_record
        verbosity: 2

    - name: Delete Internal Public DNS Record
      local_action:
        module: route53
        command: delete
        zone: "{{ domain_name }}"
        type: "{{ dns_internal_record.set.type }}"
        ttl: "{{ dns_internal_record.set.ttl }}"
        record: "{{ dns_internal_record.set.record }}"
        value: "{{ dns_internal_record.set.value }}"
      when: "'master' in short_name"
      ignore_errors: yes

    - name: Retrieve Wildcard Public DNS Record
      local_action:
        module: route53
        command: get
        zone: "{{ domain_name }}"
        record: "*.apps-{{ ec2_tag_student_id }}.{{ domain_name }}"
        type: A
      register: dns_wildcard_record
      when: "'master' in short_name"

    - debug:
        var: dns_wildcard_record
        verbosity: 2

    - name: Delete Wildcard Public DNS Record
      local_action:
        module: route53
        command: delete
        zone: "{{ domain_name }}"
        type: "{{ dns_wildcard_record.set.type }}"
        ttl: "{{ dns_wildcard_record.set.ttl }}"
        record: "{{ dns_wildcard_record.set.record }}"
        value: "{{ dns_wildcard_record.set.value }}"
      when: "'master' in short_name"
      ignore_errors: yes
      
    - name: Terminate AWS Instances
      local_action:
        module: ec2
        state: 'absent'
        region: "{{ aws_region }}"
        instance_ids: "{{ ansible_ec2_instance_id }}"
      async: 300
      poll: 0
      when: ('tower' in short_name and terminate_tower|default(false)|bool == true) or ('node' in short_name  or 'master' in short_name)
      ignore_errors: yes
