---
- hosts: masters
  vars:
    templates_query: '{range .items[*]}{.metadata.name}{"\n"}{end}'
    image_streams_query: '{range .items[*]}{.metadata.name}{"\n"}{end}'
    templates_to_keep: ['cakephp-mysql-persistent', 'metrics-deployer-template', 'registry-console']
    image_streams_to_keep: ['python', 'php', 'mysql']
    service_catalog_projects_to_annotate: ['kube-service-catalog']
    default_node_selector: 'type=app'
    service_catalog_default_node_selector: 'openshift-infra=apiserver'
    web_console_namespace: openshift-web-console
    tmp_configmap_prometheus: /tmp/prometheus-configmap.yml
    tmp_configmap_alertmanager: /tmp/alertmanager-configmap.yml
    cfme_template: https://raw.githubusercontent.com/openshift/openshift-ansible/release-3.9/roles/openshift_examples/files/examples/v3.9/cfme-templates/cfme-template.yaml
  tasks:
  - name: Update {{ student_id }}-admin user to have cluster-admin privileges
    command: >
      oc adm policy add-cluster-role-to-user cluster-admin {{ student_id }}-admin

  - name: Get templates
    command: >
      oc get templates -n openshift -o jsonpath='{{ templates_query }}'
    register: templates

  - name: Remove templates
    command: >
      oc delete templates -n openshift {{ item }}
    when: item not in templates_to_keep
    with_items:
    - "{{ templates.stdout_lines }}"

  - name: Get ImageStreams
    command: >
      oc get is -n openshift -o jsonpath='{{ image_streams_query }}'
    register: image_streams

  - name: Remove ImageStreams
    command: >
      oc delete is -n openshift {{ item }}
    when: item not in image_streams_to_keep
    with_items:
      - "{{ image_streams.stdout_lines }}"

  - name: Delete image stream tags not needed
    command: >
      oc tag {{ item }} -d
    register: tag_delete
    failed_when: tag_delete.rc != 0 and 'not found' not in tag_delete.stderr
    changed_when: tag_delete.rc == 0
    with_items:
    - openshift/php:5.5
    - openshift/php:5.6
    - openshift/mysql:5.5
    - openshift/mysql:5.6

  - name: Setup CFME Template
    command: >
      oc apply -n openshift -f {{ cfme_template }}
  
  - name: Set Default Node Selector
    become: true
    lineinfile: dest=/etc/origin/master/master-config.yaml  state=present regexp="defaultNodeSelector" line='  defaultNodeSelector{{ ':' }} {{ default_node_selector }}'

  - name: Join Prometheus and Web Console Networks
    command: >
      oc adm pod-network join-projects --to={{ openshift_prometheus_namespace }} {{ web_console_namespace }}

  - name: Get Router Stats Password
    command: >
      oc get dc/router -n default -o jsonpath='{.spec.template.spec.containers[?(.name=="router")].env[?(.name=="STATS_PASSWORD")].value}'
    register: router_password

  - name: Export Prometheus ConfigMap
    shell: oc export configmap/prometheus -n {{ openshift_prometheus_namespace }} > {{ tmp_configmap_prometheus }}

  - name: Update Prometheus ConfigMap File
    replace:
      regexp: "^    alerting:$"
      replace: "    # OpenShift Router\n    - job_name: openshift-routers\n      scrape_interval: 30s\n      scrape_timeout: 30s\n      metrics_path: /metrics\n      scheme: http\n      static_configs:\n      - targets:\n        - router.default.svc.cluster.local:1936\n      basic_auth:\n        username: admin\n        password: {{ router_password.stdout }}\n    alerting: #"
      path: "{{ tmp_configmap_prometheus }}"

  - name: Update Prometheus ConfigMap
    command: >
      oc replace configmap -n {{ openshift_prometheus_namespace }} -f {{ tmp_configmap_prometheus }}

  - name: Remove ConfigMap Exported File
    file:
      path: "{{ tmp_configmap_prometheus }}"
      state: absent
  
  - name: AlertManager Template
    template:
      src: templates/alertmanager.j2
      dest: "{{ tmp_configmap_alertmanager }}"

  - name: Delete Prometheus ConfigMap
    command: >
      oc delete configmap -n {{ openshift_prometheus_namespace }} alertmanager

  - name: Update AlertManager ConfigMap
    command: >
      oc create configmap alertmanager -n {{ openshift_prometheus_namespace }} --from-file=alertmanager.yml={{ tmp_configmap_alertmanager }}
  
  - name: Remove AlertManager ConfigMap File
    file:
      state: absent
      path: "{{ tmp_configmap_alertmanager }}"

  - name: Remove Prometheus Scrape Annotation
    shell: oc annotate svc router -n default prometheus.io/scrape=false --overwrite

  - name: Delete Prometheus Pod
    command: >
      oc delete pod -n {{ openshift_prometheus_namespace }} -l=app=prometheus

  - name: Locate OpenShift API Server
    command: >
      oc whoami --show-server=true
    register: whoami_result
  
  - name: Restart OpenShift Master API
    become: true
    systemd:
      name: atomic-openshift-master-api
      state: restarted

  - name: Verify API Server
    become: true
    command: >
      curl --silent
      --cacert /etc/origin/master/ca-bundle.crt
      {{ whoami_result.stdout }}/healthz/ready
    args:
      warn: no
    register: l_api_available_output
    until: l_api_available_output.stdout == 'ok'
    retries: 120
    delay: 1
    changed_when: false

  - name: Delete Service Catalog Pods
    command: >
      oc delete pods --all -n {{ item}}
    with_items: "{{ service_catalog_projects_to_annotate }}"
  
